---
layout: post
title: "k-최근접 이웃을 활용한 머신러닝"
date: 2024-07-29 17:44 +0900
categories: DataScience, AI
published: true
---

k-최근접 이웃을 활용한 머신러닝
===

## 1-3 마켓과 머신러닝

> 주제: 두 종류의 생선을 분류하는 머신러닝

> 목차
    1. 데이터 수집  
    2. 데이터 시각화  
    3. 머신러닝 모델 선정  
    4. 학습과 예측  

### 데이터 수집  

분류하고자하는 생선의 종류는 도미와 빙어가 있습니다.  
다음은 도미와 빙어의 길이, 무게에 관한 데이터입니다.  

```python
#도미 데이터
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0,
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0,
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0,
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0,
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

#빙어 데이터
smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]
```

### 데이터 시각화

위 데이터의 특징을 수치만을 이용해서 알아내는 것은 어려우므로 파이썬의 라이브러리 **matplotlib**을 활용하여
시각화를 진행해봅시다.  

다음은 시각화를 진행한 파이썬 코드와 산점도 그래프입니다.

```python
import matplotlib.pyplot as plt

plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()
```
!['img1'](assets/072901.png)

### 머신러닝 모델 선정

> 데이터 시각화의 결과를 통해 파악 가능한 부분은 다음과 같습니다.  
        빙어(smelt)의 무게와 길이는 도미(bream)에 비해 매우 작다.
        빙어(smelt)와 도미(bream)은 산점도상에서 특정 구역에 밀집되어있다.

위의 내용들을 종합해 보았을때 K-최근접 이웃 알고리즘을 사용한다면 도미와 빙어를 효율적으로 분류가 가능해 보입니다.


> k-최근접 이웃 알고리즘이란?  
    새로운 입력으로 들어온 데이터를 특정값으로 분류하는데 현재 데이터와 가장 가까운 k개의 데이터를 찾아 가장 많은 분류 값으로 현재 데이터를 분류하는 알고리즘이다.  


### 학습과 예측

사이킷런에서 제공해주는 knn을 사용하여 학습을 진행하겠습니다.  
위 패키지를 이용하기 위해서는 데이터를 2차원으로 변환해야합니다.  

다음은 1차원 데이터를 2차원 데이터로 합치는 과정입니다.  

```python
length = bream_length + smelt_length
weight = bream_weight + smelt_weight

fish_data = [[l,w] for l, w in zip(length, weight)]
```

>여기서 zip 함수란?  
    파라미터값에서 각각 하나씩 원소를 꺼내어 튜플로 반환하는 함수이다.


위 과정을 거치면 데이터는 다음과 같이 변환된다.  
```python
[[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0], [29.7, 450.0], [29.7, 500.0], [30.0, 390.0], [30.0, 450.0], [30.7, 500.0], [31.0, 475.0], [31.0, 500.0], [31.5, 500.0], [32.0, 340.0], [32.0, 600.0], [32.0, 600.0], [33.0, 700.0], [33.0, 700.0], [33.5, 610.0], [33.5, 650.0], [34.0, 575.0], [34.0, 685.0], [34.5, 620.0], [35.0, 680.0], [35.0, 700.0], [35.0, 725.0], [35.0, 720.0], [36.0, 714.0], [36.0, 850.0], [37.0, 1000.0], [38.5, 920.0], [38.5, 955.0], [39.5, 925.0], [41.0, 975.0], [41.0, 950.0], [9.8, 6.7], [10.5, 7.5], [10.6, 7.0], [11.0, 9.7], [11.2, 9.8], [11.3, 8.7], [11.8, 10.0], [11.8, 9.9], [12.0, 9.8], [12.2, 12.2], [12.4, 13.4], [13.0, 12.2], [14.3, 19.7], [15.0, 19.9]]
```

또한 각 데이터가 어떤 생선 데이터인지 알려주어야 하므로 도미는 1 빙어는 0으로 표현한 정답 데이터를 만듭니다.
```python
fish_target = [1] * 35 + [0] * 14
```

이제 knn 모델을 임포트 하고 학습을 진행시킵시다.  
```python
from sklearn.neighbors import KNeighborsClassifier

kn = KNeighborsClassifier()

kn.fit(fish_data, fish_target)

kn.score(fish_data, fish_target)

kn.predict([[30,600]])
```

>fit 메서드는 모델을 학습시키는 역할을 합니다.  
        input, target 값을 파라미터로 입력시 규칙을 학습합니다.  

>score 메서드는 모델의 훈련된 정도를 평가해주는 역할을 합니다.  
        훈련이 잘 되었다면 1을 리턴합니다.  

>predict 메서드는 새로운 데이터의 정답을 예측합니다.  
        현재 길이가 30, 무게가 600인 데이터를 입력했으므로 도미로 예측할 것입니다.  





